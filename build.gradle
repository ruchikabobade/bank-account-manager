buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springBootVersion = '2.0.2.RELEASE'
        netflixHystrixVersion = '2.0.0.RC1'

    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'



group = 'com.hackerearth.esri.bank'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }

    flatDir {
        dirs "${buildDir}/libs"
    }

    flatDir {
        dirs 'tmp'
    }

    jcenter()
}

configurations {
    ktlint
    all*.exclude group: 'ch.qos.logback'
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}



dependencies {
    compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module : 'logback-classic'
        exclude group: 'ch.qos.logback', module : 'logback-core'
    }
    compile('org.springframework.boot:spring-boot-starter-data-jpa'){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')

    compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix:${netflixHystrixVersion}"){
        exclude group: 'ch.qos.logback', module : 'logback-classic'
        exclude group: 'ch.qos.logback', module : 'logback-core'
    }

//	compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.apache.commons:commons-lang3:3.0')
    compile ('org.apache.httpcomponents:httpcore:4.4.1')
    compile ('org.apache.httpcomponents:httpclient:4.5')

    ktlint "com.github.shyiko:ktlint:0.24.0"
    runtime('mysql:mysql-connector-java')

    compile 'com.amazonaws:aws-java-sdk-sqs:1.11.396'
    compile 'com.amazonaws:aws-java-sdk-stepfunctions:1.11.396'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    //compile group: 'me.lamouri', name: 'jcredstash', version: '2.1.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'

    //compile group: 'me.lamouri', name: 'jcredstash', version: '2.1.1'
    //compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'

    testCompile('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'junit', module: 'junit'
    }
    testCompile 'com.h2database:h2:1.4.197'
    testCompile('junit:junit:4.12')

    compile group: 'com.amazonaws', name: 'amazon-kinesis-client', version: '1.10.0'

}

task ktlint(type: JavaExec, group: 'verification') {
    inputs.files(fileTree('src/').include('**/*.kt'))
    outputs.file 'tasks-require-outputs-to-be-up-to-date'

    description = 'Check Kotlin code style.'
    main = 'com.github.shyiko.ktlint.Main'
    classpath = configurations.ktlint
    args 'src/**/*.kt'
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: 'formatting') {
    description = 'Fix Kotlin code style deviations.'
    main = 'com.github.shyiko.ktlint.Main'
    classpath = configurations.ktlint
    args '-F', 'src/**/*.kt'
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("./build/")
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    sourceDirectories = files(["src/main/java"])

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/telstra/disputeManager/msdisputemanager/MsDisputeManagerApplication*',
                    'newrelic/**'
            ])
        })
    }
}

check.dependsOn jacocoTestReport
test.finalizedBy(jacocoTestReport)

bootRun {
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}